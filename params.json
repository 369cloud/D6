{
  "name": "D6",
  "tagline": "一款基于zepto的移动端ui库",
  "body": "\r\n## 环境配置\r\n\r\n\r\n1、安装nodeJs\r\n\thttp://www.cnblogs.com/pigtail/archive/2013/01/08/2850486.html\r\n\r\n2、安装git\r\n\thttp://jingyan.baidu.com/article/90895e0fb3495f64ed6b0b50.html\r\n\r\n3、工程目录右键，选择Git Bash\r\n\r\n\r\n4、安装gulp \r\n\t\r\n\t执行命令：npm install gulpjs/gulp#4.0 -g安装gulp到全局\r\n\t执行命令：npm install 安装配置环境到本地\r\n\t执行命令：gulp\r\n\r\n   运行`gulp`命令后，会监听`src`目录下所有`JS`、`less`文件的变更，并且会在`3003`端口启动服务器，然后再浏览器打开`http://localhost:3003/examples/index.html`\r\n\r\n\r\n## 项目主页\r\n\t\r\n[http://369cloud.github.io/D6](http://369cloud.github.io/D6/)\r\n\r\n##开发工具\r\n\r\n\r\n[369Cloud](http://www.369cloud.com) 致力于打造移动互联网云平台研发生态系统，将移动应用开发与移动应用云服务（BaaS、IaaS服务）完美集成，为开发者提供集成开发环境、移动应用开发引擎、基础服务、后端服务等一站式的移动应用开发解决方案；由[369Cloud](http://www.369cloud.com) 自主研发的一体化开发流程，实现从应用创建、自定义认证、组件选择、模板配置、到混合平台编译等一系列可视化、可配置化操作，最大程度的为开发者及创业团队节约时间成本、人力成本、资金成本。\r\n\r\n##反馈bug\r\n如果您有任何关于 `D6` 或移动前端开发中的问题，可以在QQ群中讨论，也可以通过git issue给我们反馈bug，我们会尽快解决。 当然，我们更欢迎您的fork，为 `D6` 添砖加瓦。\r\n\r\n###联系我们###\r\n* (QQ群）491311335 \r\n \r\n\r\n# 开发规范\r\n\r\n## 文件组织\r\n\r\n\t .\r\n\t    ├── src\r\n\t        └── js 字体库\r\n\t            ├── widgets 组件文件存放位置\r\n\t            ├── $extend.js 在zepto上扩展的常用方法\r\n\t            ├── core.js组件库核心文件\r\n\t            ├── iscroll.js 组件库依赖的iscroll文件（经过修改，请勿替换）\r\n\t\t\t\t├── zepto.extend.js 在zepto对象上扩展的方法\r\n\t        └── less 样式文件存放位置\r\n\t\t\t└── fonts 字体库存放位置\r\n*\tiscroll.js 组件库依赖的iscroll文件（经过修改，请勿替换）\r\n\r\n*\t组件JS需放在 `js/widgets` 目录下，若组件自身含有功能插件，应在 `widgets` 文件夹下建立一个单独文件夹来存放相关组件和插件\r\n\r\n*\t组件相关less文件放在 `less目录下` ，并且在d6.less文件中添加\r\n\r\n\t\r\n## 样式\r\n组件的classname使用 `ui-组件名称` 作为命名空间，其后根据功能添加不同标识。如：ui-tab-active\r\n\r\n## 组件开发\r\n\r\nD6组件的开发主要使用两种方式：\r\n\r\n*\t基于zeptoJs开发组件，可根据个人习惯开发基于`zeptoJs`的插件。\r\n\r\n*\t基于core.js，其提供一些简单的移动方法便于组件的构建，主要包含以下几个对象和方法：`d6`、`Base`、`$ui`、`define`、`domReady`\r\n\t-\td6：组件库的对外暴露对象，提供全局属性和方法\r\n\t-\tBase：组件对象的基础类，提供组件的基础方法和属性，所有组件对象基于该对象扩展，实例化过程会调用每个组件的`init`方法\r\n\t-\t$ui：组件的管理对象，提供组件和插件的定义、获取、注册方法\r\n\t-\tdefine：组件主体部分定义方法，将`$ui`对象传入\r\n\t-\tdomReady：页面初始化方法，传入`require`方法获取组件对象\r\n\r\n\t组件示例代码：\r\n\r\n\t\r\n\t\t/**\r\n\t\t * @file 组件\r\n\t\t */\r\n\t\t\r\n\t\t;(function() {\r\n\t\t\r\n\t\t// 私有变量  \r\n\t\t   \r\n\t\t// 私有方法  \r\n\t\t\r\n\t\t    // 渲染组件\r\n\t\t\r\n\t\t    // 绑定事件 \r\n\t\t\r\n\t\t    /**\r\n\t\t     * 组件定义\r\n\t\t     */\r\n\t\t    define(function($ui) {\r\n\t\t        // 组件对象定义  \r\n\t\t        var widget = $ui.define('widgetName', {\r\n\t\t            /**\r\n\t\t             * @property  组件属性\r\n\t\t             */\r\n\t\t            property: 0\r\n\t\t        });\r\n\r\n\t\t     //实现init方法\r\n\t\t\r\n\t\t        widget.prototype.init = function() {\r\n\t\t            // 渲染组件\r\n\t\t            // 绑定事件\r\n\t\t        };\r\n\t\t\r\n\t\t     // 对象扩展对外接口  \r\n\t\t\r\n\t\t        /**\r\n\t\t         * 功能描述\r\n\t\t         * @method method\r\n\t\t         * @param {Number} index \r\n\t\t         * @return {self} 返回本身。\r\n\t\t         */\r\n\t\t        widget.prototype.method = function(index) {\r\n\t\t\t    ......\r\n\t\t\t    ......\r\n\t\t            return this;\r\n\t\t        };\r\n\t\t\r\n\t\t        /**\r\n\t\t         * 销毁组件\r\n\t\t         * @method destroy\r\n\t\t         */\r\n\t\t       widget.prototype.destroy = function() {\r\n\t\t\r\n\t\t        };\r\n\t\t\r\n\t\t     // 绑定到zepto对象上  供外部创建对象使用 \r\n\t\t\r\n\t\t        //注册$插件\r\n\t\t        $.fn.widget = function(opts) {\r\n\t\t            var objs = [];\r\n\t\t            opts || (opts = {});\r\n\t\t            this.each(function() {\r\n\t\t                var obj = null;\r\n\t\t                var id = this.getAttribute('data-widget');\r\n\t\t                if (!id) {\r\n\t\t                    opts = $.extend(opts, {\r\n\t\t                        ref: this\r\n\t\t                    });\r\n\t\t                    id = ++$ui.uuid;\r\n\t\t                    obj = $ui.data[id] = new widget(opts);\r\n\t\t                    this.setAttribute('data-widget', id);\r\n\t\t                } else {\r\n\t\t                    obj = $ui.data[id];\r\n\t\t                }\r\n\t\t                objs.push(obj);\r\n\t\t            });\r\n\t\t            return objs.length > 1 ? objs : objs[0];\r\n\t\t        };\r\n\t\t\r\n\t\t    });\r\n\t\t})();\r\n\r\n\t插件示例代码：\r\n\r\n\t\r\n\t\t/**\r\n\t\t * @file 插件\r\n\t\t */\r\n\t\t;(function() {\r\n\t\t    // 私有变量  \r\n\t\t   \r\n\t\t    // 私有方法 \r\n\t\t\r\n\t\t    /**\r\n\t\t     * 插件定义\r\n\t\t     */\r\n\t\t    define(function($ui) {\r\n\t\t\r\n\t\t\t// 插件对象定义  \r\n\t\t        $ui.plugin('plugin', function(){\r\n\t\t\r\n\t\t\t// 插件内部实现\r\n\t\t\t\r\n\t\t        });\r\n\t\t    });\r\n\t\t})()\r\n\r\n\t\r\n\r\n\r\n## 组件初始化\r\n组件有两种初始化方式：\r\n\r\n*\t$('#className').widget()的方式；\r\n\r\n*\t通过require方法获取组件对象手动初始化：\r\n\r\n\t\tvar widget = require('widgetName')\r\n        var widgetObj = new widget({\r\n            ref:$('.className')\r\n        })\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}